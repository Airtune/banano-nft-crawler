import { INanoBlock, TAccount, TBlockHash } from "nano-account-crawler/dist/nano-interfaces";
import { NanoNode } from 'nano-account-crawler/dist/nano-node';
export declare class MintBlocksCrawler {
    private _hasLimitedSupply;
    private _head;
    private _headHeight;
    private _ipfsCID;
    private _issuer;
    private _nftSupplyBlock;
    private _nftSupplyBlockHash;
    private _nftSupplyBlockHeight;
    private _maxSupply;
    private _metadataRepresentative;
    private _mintBlocks;
    private _mintBlockCount;
    private _version;
    private _finishedSupply;
    private _cachedData;
    private _errors;
    constructor(issuer: TAccount, nftSupplyBlockHash: string);
    initFromCache(nftSupplyBlockHeight: bigint, mintBlockCount: bigint, version: string, maxSupply: bigint, metadataRepresentative: TAccount): void;
    private cachedCrawlData;
    crawl(nanoNode: NanoNode, maxRpcIterations?: number): Promise<void>;
    crawlFromFrontier(nanoNode: NanoNode, frontier: TBlockHash, maxRpcIterations?: number): Promise<void>;
    addMintBlock(block: INanoBlock): void;
    get nftSupplyBlock(): INanoBlock;
    get mintBlocks(): INanoBlock[];
    get ipfsCID(): string;
    get version(): string;
    get maxSupply(): bigint;
    get hasLimitedSupply(): boolean;
    get finishedSupply(): boolean;
    get mintBlockCount(): bigint;
    get head(): (undefined | TBlockHash);
    get headHeight(): (undefined | number);
    private parseSupplyBlock;
    private cachedSupplyBlock;
    private parseFinishSupplyBlock;
    private parseFirstMint;
    private supplyExceeded;
    get errors(): Error[];
}
